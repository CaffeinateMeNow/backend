database:
    ### CONTAINERS -- "common" configuration parameter
    downloads:
        access_key_id      : "AKIAIOSFODNN7EXAMPLE"
        secret_access_key  : "wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY"
        bucket_name        : "mediacloud-downloads"
        directory_name     : "downloads"

mediawords:
    ### CONTAINERS -- "common" configuration parameter (array!)
    download_storage_locations:
        ### store downloads in the PostgreSQL database, "raw_downloads" table
        - postgresql
        ### store downloads in Amazon S3
        #- amazon_s3

    ### CONTAINERS -- "common" configuration parameter
    read_all_downloads_from_s3 : false

    ### CONTAINERS -- "common" configuration parameter
    fallback_postgresql_downloads_to_s3 : false

    ### CONTAINERS -- "common" configuration parameter
    cache_s3_downloads : false

    ### CONTAINERS -- "common" configuration parameter
    #db_statement_timeout: "600000"

    ### CONTAINERS -- "common" configuration parameter
    # large_work_mem: "3GB"

    ### CONTAINERS -- "common" configuration parameter
    #ascii_hack_downloads_id: 123456789

    ### CONTAINERS -- "common" configuration parameter
    web_store_num_parallel: 10
    web_store_timeout: 90
    web_store_per_domain_timeout: 1

    ### CONTAINERS -- "common" configuration parameter
    # blacklist_url_pattern: "^https?://[^/]*some-website.com"

    ### CONTAINERS -- "common" configuration parameter
    # ignore_schema_version: true










### CONTAINERS -- removed; Docker Composer + Swarm acts as a process (container) manager
supervisor_solr:

    cluster:

        shards:

            # CONTAINERS -- "solr-shard" configuration parameter
            cluster_shard_count: 2

            # CONTAINERS -- "solr-shard" configuration parameter (as a container memory limit)
            jvm_heap_size: "256m"






similarweb:

    ### CONTAINERS -- "similarweb-update-audience-data" configuration parameter
    api_key: ""










cliff:

    ### CONTAINERS -- "cliff-fetch-annotation" configuration parameter
    annotator_url: ""













cliff:

    ### CONTAINERS -- "cliff-update-story-tags" configuration parameter
    cliff_version_tag: "cliff_clavin_v2.4.1"

    ### CONTAINERS -- "cliff-update-story-tags" configuration parameter
    cliff_geonames_tag_set: "cliff_geonames"

    ### CONTAINERS -- "cliff-update-story-tags" configuration parameter
    cliff_organizations_tag_set: "cliff_organizations"

    ### CONTAINERS -- "cliff-update-story-tags" configuration parameter
    cliff_people_tag_set: "cliff_people"






nytlabels:

    ### CONTAINERS -- "nytlabels-fetch-annotation" configuration parameter
    annotator_url: ""







nytlabels:

    ### CONTAINERS -- "nytlabels-update-story-tags" configuration parameter
    nytlabels_version_tag: "nyt_labeller_v1.0.0"

    ### CONTAINERS -- "nytlabels-update-story-tags" configuration parameter
    nytlabels_labels_tag_set: "nyt_labels"







facebook:

    ## CONTAINERS -- "facebook-fetch-story-stats" configuration parameter
    app_id: ""

    ## CONTAINERS -- "facebook-fetch-story-stats" configuration parameter
    app_secret: ""

    ## CONTAINERS -- "facebook-fetch-story-stats" configuration parameter
    #timeout: 60






twitter:

    ## CONTAINERS -- "topic-mine" configuration parameter
    consumer_key: ""

    ## CONTAINERS -- "topic-mine" configuration parameter
    consumer_secret: ""

    ## CONTAINERS -- "topic-mine" configuration parameter
    access_token: ""

    ## CONTAINERS -- "topic-mine" configuration parameter
    access_token_secret: ""





crimson_hexagon:

    ## CONTAINERS -- "topic-mine" configuration parameter
    key: ""

mediawords:

    # CONTAINERS -- "topic-mine" configuration parameter (array!)
    # topic_alert_emails:
    #     - topicupdates@mediacloud.org
    #     - slackupdates@mediacloud.org







#univision:
    
    ## CONTAINERS -- "crawler" configuration parameter
    #client_id: 83db02e1cba58c43d01116c50014913b47fa473b

    ## CONTAINERS -- "crawler" configuration parameter
    #client_secret: 7187037755de2dd77451f491d46b103b86fbcf79

mediawords:

    # CONTAINERS -- "crawler" configuration parameter (array of dictionaries!)
    #crawler_authenticated_domains:
        #- domain: "ap.org"
        #  user: "username"
        #  password: "password"








#session:

    # CONTAINERS -- "webapp" configuration parameter (maybe)
    #expires: 3600

    # CONTAINERS -- "webapp" configuration parameter (maybe)
    #storage: "~/tmp/mediawords-session"

# CONTAINERS -- "webapp" configuration parameter (maybe)
#google_analytics:
#      account: "<ACOUNT>"
#      domainname: "<DOMAIN>"

mediawords:

    # CONTAINERS -- "webapp" configuration parameter (maybe; try to get rid of it in uri_for())
    #base_url: "http://your.mediacloud.server/and/path"

    ### CONTAINERS -- "webapp" configuration parameter
    always_show_stack_traces: false

    ### CONTAINERS -- "webapp" configuration parameter
    recaptcha_public_key: "6LfEVt0SAAAAAFwQI0pOZ1bTHgDTpQcMeQY6VLd_"

    ### CONTAINERS -- "webapp" configuration parameter
    recaptcha_private_key: "6LfEVt0SAAAAABmI-8IJmx4g93eNcSeyeCxvLMs2"

    ### CONTAINERS -- "webapp" configuration parameter
    default_home_page: "admin/media/list"







mediawords:

    ### CONTAINERS -- "import-solr-data" configuration parameter
    solr_import:
        # Stories to import into Solr on a single run
        max_queued_stories: 100000

















# CONTAINERS -- hardcoded; probably used by the webapp
name: MediaWords

database:

    # CONTAINERS -- hardcoded; database always accessible at the same host
    - label : "LABEL"
      type  : "pg"
      host  : "localhost"
      port  : 5432
      db    : "mediacloud"
      user  : "mediaclouduser"
      pass  : "mediacloud"

    # CONTAINERS -- removed; one and only database
    - label : "test"
      type  : "pg"
      host  : "localhost"
      port  : 5432
      db    : "mediacloud_test"
      user  : "mediaclouduser"
      pass  : "mediacloud"

amazon_s3:

    ### CONTAINERS -- removed; different credentials are to be passed when testing
    test:
        access_key_id      : "AKIAIOSFODNN7EXAMPLE"
        secret_access_key  : "wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY"
        bucket_name        : "mediacloud_test"
        directory_name     : "downloads_test"

job_manager:

    rabbitmq:

        ## CONTAINERS -- hardcoded; RabbitMQ always accessible at the same host
        client:

            hostname: "localhost"
            port: 5673     # not the default 5672
            username: "mediacloud"
            password: "mediacloud"
            vhost: "/mediacloud"
            timeout: 60

        ## CONTAINERS -- removed; wrapper script reads its own configuration
        ## (rabbitmq_wrapper.sh will use this for starting up an instance of
        ## RabbitMQ)
        server:

            enabled: true
            listen: "127.0.0.1"
            port: 5673     # not the default 5672
            node_name: "mediacloud@localhost"
            username: "mediacloud"
            password: "mediacloud"
            vhost: "/mediacloud"

### CONTAINERS -- removed; Docker Composer + Swarm acts as a process (container) manager
supervisor:
    childlogdir: "data/supervisor_logs/"
    start_no_supervisor_programs: true
    #programs:
        #crawler:
            #numprocs: 1
            #autostart: true
            #autorestart: false
        #extract_and_vector:
            #numprocs: 1
            #autostart: true
            #autorestart: true
        #create_missing_partitions
        #purge_object_caches
        #facebook_fetch_story_stats
        #rabbitmq
        #rescrape_media
        #topic_mine
        #topic_snapshot
        #solr_cluster_zookeeper
        #solr_shard

### CONTAINERS -- removed; Docker Composer + Swarm acts as a process (container) manager
supervisor_solr:

    cluster:
        zookeeper:
            listen: "0.0.0.0"
            port: 9983

        shards:

            local_shard_count: 2

            zookeeper_host: "localhost"
            zookeeper_port: 9983


cliff:

    ### CONTAINERS -- removed
    enabled: false

nytlabels:

    ### CONTAINERS -- removed
    enabled: false

facebook:

    ### CONTAINERS -- removed
    enabled: false


mail:

    ## CONTAINERS -- hardcoded; DKIM / SPF configured for mediacloud.org, so no need to toggle this
    from_address: "noreply@mediacloud.org"

    ### CONTAINERS -- hardcoded; SMTP always accessible at the same host
    smtp:

        host: "localhost"
        port: 25
        starttls: false
        username: ""
        password: ""

mediawords:

    # CONTAINERS -- split into multiple values in /var
    #data_dir: "<bindir>/../data"

    # CONTAINERS -- hardcoded; no one ever edited that
    user_agent: "mediawords bot (http://cyber.law.harvard.edu)"
    owner: "mediawords@cyber.law.harvard.edu"

    ### CONTAINERS -- hardcoded; no one will ever edit that
    # temporary_table_tablespace: temporary_tablespace

    # CONTAINERS -- remove altogether, some obsolete stuff
    # solr_wc_url: http://localhost/api/v2/wc

    # CONTAINERS -- remove altogether, some obsolete stuff
    # solr_wc_key: FOO

    # CONTAINERS -- hardcoded; Solr always accessible at the same host
    solr_url:

        # Solr shards
        #- http://127.0.0.1:7981/solr
        #- http://127.0.0.1:7982/solr
        #- http://127.0.0.1:7983/solr
        #- http://127.0.0.1:7984/solr
        #- http://127.0.0.1:7985/solr
        #- http://127.0.0.1:7986/solr
        #- http://127.0.0.1:7987/solr
        #- http://127.0.0.1:7988/solr

    # CONTAINERS -- remove altogether, make wc cache use PostgreSQL
    # wc_cache_version: 1
